/**
 * 
 */
package org.irods.rest.utils;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.irods.jargon.testutils.TestConfigurationException;
import org.irods.rest.config.IrodsRestConfiguration;

/**
 * @author Mike Conway - NIEHS
 *
 */
public class RestTestUtils {

	/**
	 * 
	 */
	public RestTestUtils() {

	}

	/**
	 * Given a set of testing properties for jargon and for rest, create the
	 * {@link IrodsRestConfiguration} that can be used as a default for base unit
	 * tests.
	 * 
	 * @param testingProperties     {@link Properties} for jargon testing
	 * @param restTestingProperties {@link Properties} for rest testing
	 * @return {@link IrodsRestConfiguration} to use for tests
	 */
	public IrodsRestConfiguration irodsRestConfigurationFromTestProperties(Properties testingProperties,
			Properties restTestingProperties) {
		if (testingProperties == null) {
			throw new IllegalArgumentException("null testingProperties");
		}

		if (restTestingProperties == null) {
			throw new IllegalArgumentException("null restTestingProperties");
		}

		IrodsRestConfiguration irodsRestConfiguration = new IrodsRestConfiguration();
		irodsRestConfiguration.setAuthScheme(restTestingProperties.getProperty("auth.type"));
		irodsRestConfiguration.setDetailedDataTypeDetermination(
				Boolean.valueOf(restTestingProperties.getProperty("irodsext.datatyper.detailed.determination")));
		irodsRestConfiguration.setIrodsDefaultResource(restTestingProperties.getProperty("default.storage.resource"));
		irodsRestConfiguration.setIrodsHost(restTestingProperties.getProperty("irods.host"));
		irodsRestConfiguration.setIrodsZone(restTestingProperties.getProperty("irods.zone"));
		irodsRestConfiguration.setJwtAlgo(restTestingProperties.getProperty("jwt.algo"));
		irodsRestConfiguration.setPersistDataTypes(
				Boolean.valueOf(restTestingProperties.getProperty("irodsext.datatyper.persist.data.types")));
		irodsRestConfiguration.setPort(Integer.parseInt(restTestingProperties.getProperty("irods.port")));
		irodsRestConfiguration.setProxyUser(restTestingProperties.getProperty("proxy.user"));
		irodsRestConfiguration.setProxyPassword(restTestingProperties.getProperty("proxy.password"));
		irodsRestConfiguration.setRealm(restTestingProperties.getProperty("irods.realm"));
		irodsRestConfiguration.setSharedJwtKey(restTestingProperties.getProperty("shared.jwt.key"));
		return irodsRestConfiguration;
	}

	/**
	 * Load the properties that control various tests from the test.rest.properties
	 * file on the code path generated by the pom
	 *
	 * @return {@link Properties} class with the test values
	 * @throws TestConfigurationException {@link TestConfigurationException}
	 *
	 */
	public Properties getRestTestProperties() throws TestConfigurationException {
		ClassLoader loader = this.getClass().getClassLoader();
		InputStream in = loader.getResourceAsStream("test.rest.properties");
		Properties properties = new Properties();

		try {
			properties.load(in);
		} catch (IOException ioe) {
			throw new TestConfigurationException("error loading test properties", ioe);
		} finally {
			try {
				in.close();
			} catch (Exception e) {
				// ignore
			}
		}
		return properties;
	}

}
