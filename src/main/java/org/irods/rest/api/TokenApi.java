/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.irods.rest.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-18T14:35:03.245Z[GMT]")
@Api(value = "token", description = "the token API")
public interface TokenApi {

    TokenApiDelegate getDelegate();

    @ApiOperation(value = "obtain an encoded jwt for access", nickname = "obtainToken", notes = "Obtain a JWT token for accessing REST endpoints ", response = String.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully authenticated", response = String.class),
        @ApiResponse(code = 401, message = "Authorization failed") })
    @RequestMapping(value = "/token",
        produces = { "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<String> obtainToken(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userName", required = true) String userName,@ApiParam(value = "") @Valid @RequestParam(value = "password", required = false) String password,@ApiParam(value = "", allowableValues = "PAM, STANDARD") @Valid @RequestParam(value = "authType", required = false) String authType) {
        return getDelegate().obtainToken(userName, password, authType);
    }

}
